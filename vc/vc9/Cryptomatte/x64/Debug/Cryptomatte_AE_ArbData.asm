; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
_DATA	SEGMENT
_bad_alloc_Message DQ FLAT:$SG20598
_DATA	ENDS
CONST	SEGMENT
$SG20598 DB	'bad allocation', 00H
$SG126601 DB	00H
$SG126566 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'a', 00H, 'f', 00H, 't'
	DB	00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'f', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'C', 00H, 'r', 00H, 'y'
	DB	00H, 'p', 00H, 't', 00H, 'o', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	't', 00H, 'e', 00H, '_', 00H, 'A', 00H, 'E', 00H, '_', 00H, 'A'
	DB	00H, 'r', 00H, 'b', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	'.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG126602 DB	00H
$SG126603 DB	00H
	ORG $+2
$SG126567 DB	'm', 00H, 'a', 00H, 'n', 00H, 'i', 00H, 'f', 00H, 'e', 00H
	DB	's', 00H, 't', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'G'
	DB	00H, 'e', 00H, 't', 00H, 'M', 00H, 'a', 00H, 'n', 00H, 'i', 00H
	DB	'f', 00H, 'e', 00H, 's', 00H, 't', 00H, '(', 00H, 'a', 00H, 'r'
	DB	00H, 'b', 00H, ')', 00H, 00H, 00H
	ORG $+14
$SG126569 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'a', 00H, 'f', 00H, 't'
	DB	00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'f', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'C', 00H, 'r', 00H, 'y'
	DB	00H, 'p', 00H, 't', 00H, 'o', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	't', 00H, 'e', 00H, '_', 00H, 'A', 00H, 'E', 00H, '_', 00H, 'A'
	DB	00H, 'r', 00H, 'b', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	'.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG126570 DB	's', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'G', 00H, 'e', 00H, 't', 00H, 'S', 00H, 'e', 00H, 'l', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, '('
	DB	00H, 'a', 00H, 'r', 00H, 'b', 00H, ')', 00H, 00H, 00H
	ORG $+10
$SG126632 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'a', 00H, 'f', 00H, 't'
	DB	00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'f', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'C', 00H, 'r', 00H, 'y'
	DB	00H, 'p', 00H, 't', 00H, 'o', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	't', 00H, 'e', 00H, '_', 00H, 'A', 00H, 'E', 00H, '_', 00H, 'A'
	DB	00H, 'r', 00H, 'b', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	'.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG126754 DB	'cry1', 00H
	ORG $+7
$SG126633 DB	'i', 00H, 'n', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'b', 00H
	DB	'_', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, '-', 00H, '>'
	DB	00H, 'm', 00H, 'a', 00H, 'g', 00H, 'i', 00H, 'c', 00H, '[', 00H
	DB	'0', 00H, ']', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, ''''
	DB	00H, 'c', 00H, '''', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'b', 00H, '_'
	DB	00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, '-', 00H, '>', 00H
	DB	'm', 00H, 'a', 00H, 'g', 00H, 'i', 00H, 'c', 00H, '[', 00H, '1'
	DB	00H, ']', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '''', 00H
	DB	'r', 00H, '''', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'i'
	DB	00H, 'n', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'b', 00H, '_', 00H
	DB	'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, '-', 00H, '>', 00H, 'm'
	DB	00H, 'a', 00H, 'g', 00H, 'i', 00H, 'c', 00H, '[', 00H, '2', 00H
	DB	']', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '''', 00H, 'y'
	DB	00H, '''', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'i', 00H
	DB	'n', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'b', 00H, '_', 00H, 'd'
	DB	00H, 'a', 00H, 't', 00H, 'a', 00H, '-', 00H, '>', 00H, 'm', 00H
	DB	'a', 00H, 'g', 00H, 'i', 00H, 'c', 00H, '[', 00H, '3', 00H, ']'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '''', 00H, '1', 00H
	DB	'''', 00H, 00H, 00H
	ORG $+6
$SG126635 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'a', 00H, 'f', 00H, 't'
	DB	00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'f', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'C', 00H, 'r', 00H, 'y'
	DB	00H, 'p', 00H, 't', 00H, 'o', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	't', 00H, 'e', 00H, '_', 00H, 'A', 00H, 'E', 00H, '_', 00H, 'A'
	DB	00H, 'r', 00H, 'b', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	'.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG126755 DB	'cry1', 00H
	ORG $+7
$SG126636 DB	'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'a', 00H, 'r', 00H
	DB	'b', 00H, '_', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, '-'
	DB	00H, '>', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'i', 00H, 'c', 00H
	DB	'[', 00H, '0', 00H, ']', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, '''', 00H, 'c', 00H, '''', 00H, ' ', 00H, '&', 00H, '&', 00H
	DB	' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'a', 00H, 'r'
	DB	00H, 'b', 00H, '_', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	'-', 00H, '>', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'i', 00H, 'c'
	DB	00H, '[', 00H, '1', 00H, ']', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, '''', 00H, 'r', 00H, '''', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'a', 00H
	DB	'r', 00H, 'b', 00H, '_', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a'
	DB	00H, '-', 00H, '>', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'i', 00H
	DB	'c', 00H, '[', 00H, '2', 00H, ']', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, '''', 00H, 'y', 00H, '''', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'a'
	DB	00H, 'r', 00H, 'b', 00H, '_', 00H, 'd', 00H, 'a', 00H, 't', 00H
	DB	'a', 00H, '-', 00H, '>', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'i'
	DB	00H, 'c', 00H, '[', 00H, '3', 00H, ']', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, '''', 00H, '1', 00H, '''', 00H, 00H, 00H
	ORG $+14
$SG126638 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'a', 00H, 'f', 00H, 't'
	DB	00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'f', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'C', 00H, 'r', 00H, 'y'
	DB	00H, 'p', 00H, 't', 00H, 'o', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	't', 00H, 'e', 00H, '_', 00H, 'A', 00H, 'E', 00H, '_', 00H, 'A'
	DB	00H, 'r', 00H, 'b', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	'.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+12
$SG126639 DB	'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'a', 00H, 'r', 00H
	DB	'b', 00H, '_', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, '-'
	DB	00H, '>', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'i', 00H, 'f', 00H
	DB	'e', 00H, 's', 00H, 't', 00H, '_', 00H, 'h', 00H, 'a', 00H, 's'
	DB	00H, 'h', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'i', 00H
	DB	'n', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'b', 00H, '_', 00H, 'd'
	DB	00H, 'a', 00H, 't', 00H, 'a', 00H, '-', 00H, '>', 00H, 'm', 00H
	DB	'a', 00H, 'n', 00H, 'i', 00H, 'f', 00H, 'e', 00H, 's', 00H, 't'
	DB	00H, '_', 00H, 'h', 00H, 'a', 00H, 's', 00H, 'h', 00H, 00H, 00H
	ORG $+12
$SG126641 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'a', 00H, 'f', 00H, 't'
	DB	00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'f', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'C', 00H, 'r', 00H, 'y'
	DB	00H, 'p', 00H, 't', 00H, 'o', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	't', 00H, 'e', 00H, '_', 00H, 'A', 00H, 'E', 00H, '_', 00H, 'A'
	DB	00H, 'r', 00H, 'b', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	'.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+12
$SG126642 DB	'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'a', 00H, 'r', 00H
	DB	'b', 00H, '_', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, '-'
	DB	00H, '>', 00H, 's', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, '_', 00H, 'h', 00H, 'a'
	DB	00H, 's', 00H, 'h', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'b', 00H, '_'
	DB	00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, '-', 00H, '>', 00H
	DB	's', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, '_', 00H, 'h', 00H, 'a', 00H, 's', 00H
	DB	'h', 00H, 00H, 00H
	ORG $+8
$SG126671 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'a', 00H, 'f', 00H, 't'
	DB	00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'f', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'C', 00H, 'r', 00H, 'y'
	DB	00H, 'p', 00H, 't', 00H, 'o', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	't', 00H, 'e', 00H, '_', 00H, 'A', 00H, 'E', 00H, '_', 00H, 'A'
	DB	00H, 'r', 00H, 'b', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	'.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+12
$SG126672 DB	'b', 00H, 'u', 00H, 'f', 00H, '_', 00H, 's', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, 'L', 00H, 'u', 00H, ' ', 00H, '>', 00H, '='
	DB	00H, ' ', 00H, 'P', 00H, 'F', 00H, '_', 00H, 'G', 00H, 'E', 00H
	DB	'T', 00H, '_', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'D', 00H, 'L'
	DB	00H, 'E', 00H, '_', 00H, 'S', 00H, 'I', 00H, 'Z', 00H, 'E', 00H
	DB	'(', 00H, 'a', 00H, 'r', 00H, 'b', 00H, 'H', 00H, ')', 00H, 00H
	DB	00H
	ORG $+2
$SG126693 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'a', 00H, 'f', 00H, 't'
	DB	00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'f', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'C', 00H, 'r', 00H, 'y'
	DB	00H, 'p', 00H, 't', 00H, 'o', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	't', 00H, 'e', 00H, '_', 00H, 'A', 00H, 'E', 00H, '_', 00H, 'A'
	DB	00H, 'r', 00H, 'b', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	'.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+12
$SG126694 DB	'i', 00H, 'n', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'b', 00H
	DB	'_', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, '-', 00H, '>'
	DB	00H, 'm', 00H, 'a', 00H, 'g', 00H, 'i', 00H, 'c', 00H, '[', 00H
	DB	'0', 00H, ']', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, ''''
	DB	00H, 'c', 00H, '''', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'b', 00H, '_'
	DB	00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, '-', 00H, '>', 00H
	DB	'm', 00H, 'a', 00H, 'g', 00H, 'i', 00H, 'c', 00H, '[', 00H, '1'
	DB	00H, ']', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '''', 00H
	DB	'r', 00H, '''', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'i'
	DB	00H, 'n', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'b', 00H, '_', 00H
	DB	'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, '-', 00H, '>', 00H, 'm'
	DB	00H, 'a', 00H, 'g', 00H, 'i', 00H, 'c', 00H, '[', 00H, '2', 00H
	DB	']', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '''', 00H, 'y'
	DB	00H, '''', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'i', 00H
	DB	'n', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'b', 00H, '_', 00H, 'd'
	DB	00H, 'a', 00H, 't', 00H, 'a', 00H, '-', 00H, '>', 00H, 'm', 00H
	DB	'a', 00H, 'g', 00H, 'i', 00H, 'c', 00H, '[', 00H, '3', 00H, ']'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '''', 00H, '1', 00H
	DB	'''', 00H, 00H, 00H
	ORG $+6
$SG126696 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'a', 00H, 'f', 00H, 't'
	DB	00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'f', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'C', 00H, 'r', 00H, 'y'
	DB	00H, 'p', 00H, 't', 00H, 'o', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	't', 00H, 'e', 00H, '_', 00H, 'A', 00H, 'E', 00H, '_', 00H, 'A'
	DB	00H, 'r', 00H, 'b', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	'.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+12
$SG126697 DB	'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'a', 00H, 'r', 00H
	DB	'b', 00H, '_', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, '-'
	DB	00H, '>', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'i', 00H, 'c', 00H
	DB	'[', 00H, '0', 00H, ']', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, '''', 00H, 'c', 00H, '''', 00H, ' ', 00H, '&', 00H, '&', 00H
	DB	' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'a', 00H, 'r'
	DB	00H, 'b', 00H, '_', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	'-', 00H, '>', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'i', 00H, 'c'
	DB	00H, '[', 00H, '1', 00H, ']', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, '''', 00H, 'r', 00H, '''', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'a', 00H
	DB	'r', 00H, 'b', 00H, '_', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a'
	DB	00H, '-', 00H, '>', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'i', 00H
	DB	'c', 00H, '[', 00H, '2', 00H, ']', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, '''', 00H, 'y', 00H, '''', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'a'
	DB	00H, 'r', 00H, 'b', 00H, '_', 00H, 'd', 00H, 'a', 00H, 't', 00H
	DB	'a', 00H, '-', 00H, '>', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'i'
	DB	00H, 'c', 00H, '[', 00H, '3', 00H, ']', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, '''', 00H, '1', 00H, '''', 00H, 00H, 00H
	ORG $+14
$SG126700 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'a', 00H, 'f', 00H, 't'
	DB	00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'f', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'C', 00H, 'r', 00H, 'y'
	DB	00H, 'p', 00H, 't', 00H, 'o', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	't', 00H, 'e', 00H, '_', 00H, 'A', 00H, 'E', 00H, '_', 00H, 'A'
	DB	00H, 'r', 00H, 'b', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	'.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+12
$SG126701 DB	'b', 00H, 'u', 00H, 'f', 00H, '_', 00H, 's', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, 'L', 00H, 'u', 00H, ' ', 00H, '<', 00H, '='
	DB	00H, ' ', 00H, 'P', 00H, 'F', 00H, '_', 00H, 'G', 00H, 'E', 00H
	DB	'T', 00H, '_', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'D', 00H, 'L'
	DB	00H, 'E', 00H, '_', 00H, 'S', 00H, 'I', 00H, 'Z', 00H, 'E', 00H
	DB	'(', 00H, '*', 00H, 'a', 00H, 'r', 00H, 'b', 00H, 'P', 00H, 'H'
	DB	00H, ')', 00H, 00H, 00H
	ORG $+14
$SG126705 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'a', 00H, 'f', 00H, 't'
	DB	00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'f', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'C', 00H, 'r', 00H, 'y'
	DB	00H, 'p', 00H, 't', 00H, 'o', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	't', 00H, 'e', 00H, '_', 00H, 'A', 00H, 'E', 00H, '_', 00H, 'A'
	DB	00H, 'r', 00H, 'b', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	'.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+12
$SG126706 DB	'o', 00H, 'l', 00H, 'd', 00H, '_', 00H, 'm', 00H, 'a', 00H
	DB	'n', 00H, 'i', 00H, 'f', 00H, 'e', 00H, 's', 00H, 't', 00H, '_'
	DB	00H, 'h', 00H, 'a', 00H, 's', 00H, 'h', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'a'
	DB	00H, 'r', 00H, 'b', 00H, '_', 00H, 'd', 00H, 'a', 00H, 't', 00H
	DB	'a', 00H, '-', 00H, '>', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'i'
	DB	00H, 'f', 00H, 'e', 00H, 's', 00H, 't', 00H, '_', 00H, 'h', 00H
	DB	'a', 00H, 's', 00H, 'h', 00H, 00H, 00H
	ORG $+14
$SG126708 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'a', 00H, 'f', 00H, 't'
	DB	00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'f', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'C', 00H, 'r', 00H, 'y'
	DB	00H, 'p', 00H, 't', 00H, 'o', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	't', 00H, 'e', 00H, '_', 00H, 'A', 00H, 'E', 00H, '_', 00H, 'A'
	DB	00H, 'r', 00H, 'b', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	'.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+12
$SG126709 DB	'o', 00H, 'l', 00H, 'd', 00H, '_', 00H, 's', 00H, 'e', 00H
	DB	'l', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n'
	DB	00H, '_', 00H, 'h', 00H, 'a', 00H, 's', 00H, 'h', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, '_'
	DB	00H, 'a', 00H, 'r', 00H, 'b', 00H, '_', 00H, 'd', 00H, 'a', 00H
	DB	't', 00H, 'a', 00H, '-', 00H, '>', 00H, 's', 00H, 'e', 00H, 'l'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H
	DB	'_', 00H, 'h', 00H, 'a', 00H, 's', 00H, 'h', 00H, 00H, 00H
	ORG $+10
$SG126722 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'a', 00H, 'f', 00H, 't'
	DB	00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'f', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'C', 00H, 'r', 00H, 'y'
	DB	00H, 'p', 00H, 't', 00H, 'o', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	't', 00H, 'e', 00H, '_', 00H, 'A', 00H, 'E', 00H, '_', 00H, 'A'
	DB	00H, 'r', 00H, 'b', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	'.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG126723 DB	'F', 00H, 'A', 00H, 'L', 00H, 'S', 00H, 'E', 00H, 00H, 00H
	ORG $+12
$SG126756 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'a', 00H, 'f', 00H, 't'
	DB	00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'f', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'C', 00H, 'r', 00H, 'y'
	DB	00H, 'p', 00H, 't', 00H, 'o', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	't', 00H, 'e', 00H, '_', 00H, 'A', 00H, 'E', 00H, '_', 00H, 'A'
	DB	00H, 'r', 00H, 'b', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	'.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+12
$SG126757 DB	'!', 00H, 's', 00H, 't', 00H, 'r', 00H, 'n', 00H, 'c', 00H
	DB	'm', 00H, 'p', 00H, '(', 00H, 'a', 00H, '_', 00H, 'd', 00H, 'a'
	DB	00H, 't', 00H, 'a', 00H, '-', 00H, '>', 00H, 'm', 00H, 'a', 00H
	DB	'g', 00H, 'i', 00H, 'c', 00H, ',', 00H, ' ', 00H, '"', 00H, 'c'
	DB	00H, 'r', 00H, 'y', 00H, '1', 00H, '"', 00H, ',', 00H, ' ', 00H
	DB	'4', 00H, ')', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '!'
	DB	00H, 's', 00H, 't', 00H, 'r', 00H, 'n', 00H, 'c', 00H, 'm', 00H
	DB	'p', 00H, '(', 00H, 'b', 00H, '_', 00H, 'd', 00H, 'a', 00H, 't'
	DB	00H, 'a', 00H, '-', 00H, '>', 00H, 'm', 00H, 'a', 00H, 'g', 00H
	DB	'i', 00H, 'c', 00H, ',', 00H, ' ', 00H, '"', 00H, 'c', 00H, 'r'
	DB	00H, 'y', 00H, '1', 00H, '"', 00H, ',', 00H, ' ', 00H, '4', 00H
	DB	')', 00H, 00H, 00H
	ORG $+14
$SG126785 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'a', 00H, 'f', 00H, 't'
	DB	00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'f', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'C', 00H, 'r', 00H, 'y'
	DB	00H, 'p', 00H, 't', 00H, 'o', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	't', 00H, 'e', 00H, '_', 00H, 'A', 00H, 'E', 00H, '_', 00H, 'A'
	DB	00H, 'r', 00H, 'b', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	'.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG126786 DB	'F', 00H, 'A', 00H, 'L', 00H, 'S', 00H, 'E', 00H, 00H, 00H
	ORG $+12
$SG126789 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'a', 00H, 'f', 00H, 't'
	DB	00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'f', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'C', 00H, 'r', 00H, 'y'
	DB	00H, 'p', 00H, 't', 00H, 'o', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	't', 00H, 'e', 00H, '_', 00H, 'A', 00H, 'E', 00H, '_', 00H, 'A'
	DB	00H, 'r', 00H, 'b', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	'.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG126790 DB	'F', 00H, 'A', 00H, 'L', 00H, 'S', 00H, 'E', 00H, 00H, 00H
	ORG $+12
$SG126793 DB	'.', 00H, '.', 00H, '\', 00H, '.', 00H, '.', 00H, '\', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'a', 00H, 'f', 00H, 't'
	DB	00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'f', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'C', 00H, 'r', 00H, 'y'
	DB	00H, 'p', 00H, 't', 00H, 'o', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	't', 00H, 'e', 00H, '_', 00H, 'A', 00H, 'E', 00H, '_', 00H, 'A'
	DB	00H, 'r', 00H, 'b', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	'.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG126794 DB	'F', 00H, 'A', 00H, 'L', 00H, 'S', 00H, 'E', 00H, 00H, 00H
CONST	ENDS
PUBLIC	GetLayer
; Function compile flags: /Odtp
; File c:\users\brendan bolles\documents\development\proexr\src\aftereffects\cryptomatte_ae_arbdata.cpp
_TEXT	SEGMENT
arb$ = 8
GetLayer PROC

; 51   : {

	mov	QWORD PTR [rsp+8], rcx

; 52   : 	return arb->layer;

	mov	rax, QWORD PTR arb$[rsp]
	add	rax, 32					; 00000020H

; 53   : }

	ret	0
GetLayer ENDP
_TEXT	ENDS
PUBLIC	GetSelection
; Function compile flags: /Odtp
_TEXT	SEGMENT
arb$ = 8
GetSelection PROC

; 58   : {

	mov	QWORD PTR [rsp+8], rcx

; 59   : 	return &arb->data[arb->manifest_size];

	mov	rax, QWORD PTR arb$[rsp]
	mov	ecx, DWORD PTR [rax+96]
	mov	rax, QWORD PTR arb$[rsp]
	lea	rax, QWORD PTR [rax+rcx+112]

; 60   : }

	ret	0
GetSelection ENDP
_TEXT	ENDS
PUBLIC	GetManifest
; Function compile flags: /Odtp
_TEXT	SEGMENT
arb$ = 8
GetManifest PROC

; 65   : {

	mov	QWORD PTR [rsp+8], rcx

; 66   : 	return &arb->data[0];

	mov	rax, QWORD PTR arb$[rsp]
	add	rax, 112				; 00000070H

; 67   : }

	ret	0
GetManifest ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	SetArb
EXTRN	__GSHandlerCheck:PROC
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ:PROC
EXTRN	__imp__wassert:PROC
EXTRN	__imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PEBD@Z:PROC
EXTRN	__imp_strncpy:PROC
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ:PROC
EXTRN	__imp_?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z:PROC
EXTRN	__imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ:PROC
EXTRN	__security_cookie:QWORD
EXTRN	__security_check_cookie:PROC
pdata	SEGMENT
$pdata$SetArb DD imagerel $LN9
	DD	imagerel $LN9+747
	DD	imagerel $unwind$SetArb
pdata	ENDS
xdata	SEGMENT
$unwind$SetArb DD 022b19H
	DD	03015f21cH
	DD	imagerel __GSHandlerCheck
	DD	070H
; Function compile flags: /Odtp
xdata	ENDS
_TEXT	SEGMENT
arb$ = 32
layer$ = 48
siz$ = 96
handle_siz$126556 = 104
__$ArrayPad$ = 112
in_data$ = 144
arbH$ = 152
l$ = 160
selection$ = 168
manifest$ = 176
SetArb	PROC

; 72   : {

$LN9:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbx
	sub	rsp, 128				; 00000080H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 73   : 	assert(sizeof(CryptomatteArbitraryData) == 116);
; 74   : 	
; 75   : 	const size_t siz = sizeof(CryptomatteArbitraryData) + manifest.size() + selection.size();

	mov	rcx, QWORD PTR manifest$[rsp]
	call	QWORD PTR __imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
	mov	rbx, rax
	mov	rcx, QWORD PTR selection$[rsp]
	call	QWORD PTR __imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
	lea	rax, QWORD PTR [rbx+rax+116]
	mov	QWORD PTR siz$[rsp], rax

; 76   : 	
; 77   : 	if(*arbH == NULL)

	mov	rax, QWORD PTR arbH$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN4@SetArb

; 78   : 	{
; 79   : 		*arbH = PF_NEW_HANDLE(siz);

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rcx, QWORD PTR siz$[rsp]
	call	QWORD PTR [rax+160]
	mov	r11, rax
	mov	rax, QWORD PTR arbH$[rsp]
	mov	QWORD PTR [rax], r11

; 80   : 	}
; 81   : 	else

	jmp	SHORT $LN3@SetArb
$LN4@SetArb:

; 82   : 	{
; 83   : 		const size_t handle_siz = PF_GET_HANDLE_SIZE(*arbH);

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rcx, QWORD PTR arbH$[rsp]
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR [rax+440]
	mov	QWORD PTR handle_siz$126556[rsp], rax

; 84   : 		
; 85   : 		if(siz != handle_siz)

	mov	rax, QWORD PTR handle_siz$126556[rsp]
	cmp	QWORD PTR siz$[rsp], rax
	je	SHORT $LN3@SetArb

; 86   : 			PF_RESIZE_HANDLE(siz, arbH);

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rdx, QWORD PTR arbH$[rsp]
	mov	rcx, QWORD PTR siz$[rsp]
	call	QWORD PTR [rax+464]
$LN3@SetArb:

; 87   : 	}
; 88   : 	
; 89   : 	CryptomatteArbitraryData *arb = (CryptomatteArbitraryData *)PF_LOCK_HANDLE(*arbH);

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rcx, QWORD PTR arbH$[rsp]
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR [rax+168]
	mov	QWORD PTR arb$[rsp], rax

; 90   : 	
; 91   : 	arb->magic[0] = 'c';

	mov	rax, QWORD PTR arb$[rsp]
	mov	BYTE PTR [rax], 99			; 00000063H

; 92   : 	arb->magic[1] = 'r';

	mov	rax, QWORD PTR arb$[rsp]
	mov	BYTE PTR [rax+1], 114			; 00000072H

; 93   : 	arb->magic[2] = 'y';

	mov	rax, QWORD PTR arb$[rsp]
	mov	BYTE PTR [rax+2], 121			; 00000079H

; 94   : 	arb->magic[3] = '1';

	mov	rax, QWORD PTR arb$[rsp]
	mov	BYTE PTR [rax+3], 49			; 00000031H

; 95   : 
; 96   : 	std::string layer = l;

	mov	rdx, QWORD PTR l$[rsp]
	lea	rcx, QWORD PTR layer$[rsp]
	call	QWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z

; 97   : 	
; 98   : 	if(layer.size() > MAX_LAYER_NAME_LEN)

	lea	rcx, QWORD PTR layer$[rsp]
	call	QWORD PTR __imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
	cmp	rax, 63					; 0000003fH
	jbe	SHORT $LN1@SetArb

; 99   : 		layer.resize(MAX_LAYER_NAME_LEN);

	mov	edx, 63					; 0000003fH
	lea	rcx, QWORD PTR layer$[rsp]
	call	QWORD PTR __imp_?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z
$LN1@SetArb:

; 100  : 	
; 101  : 	strncpy(arb->layer, layer.c_str(), MAX_LAYER_NAME_LEN + 1);

	lea	rcx, QWORD PTR layer$[rsp]
	call	QWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
	mov	rcx, QWORD PTR arb$[rsp]
	add	rcx, 32					; 00000020H
	mov	r8d, 64					; 00000040H
	mov	rdx, rax
	call	QWORD PTR __imp_strncpy

; 102  : 	
; 103  : 	arb->manifest_size = manifest.size() + 1;

	mov	rcx, QWORD PTR manifest$[rsp]
	call	QWORD PTR __imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
	mov	rcx, rax
	add	rcx, 1
	mov	rax, QWORD PTR arb$[rsp]
	mov	DWORD PTR [rax+96], ecx

; 104  : 	arb->selection_size = selection.size() + 1;

	mov	rcx, QWORD PTR selection$[rsp]
	call	QWORD PTR __imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
	mov	rcx, rax
	add	rcx, 1
	mov	rax, QWORD PTR arb$[rsp]
	mov	DWORD PTR [rax+104], ecx

; 105  : 	
; 106  : 	strncpy(&arb->data[0], manifest.c_str(), arb->manifest_size);

	mov	rax, QWORD PTR arb$[rsp]
	mov	ebx, DWORD PTR [rax+96]
	mov	rcx, QWORD PTR manifest$[rsp]
	call	QWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
	mov	rcx, QWORD PTR arb$[rsp]
	add	rcx, 112				; 00000070H
	mov	r8, rbx
	mov	rdx, rax
	call	QWORD PTR __imp_strncpy

; 107  : 	strncpy(&arb->data[arb->manifest_size], selection.c_str(), arb->selection_size);

	mov	r11, QWORD PTR arb$[rsp]
	mov	ebx, DWORD PTR [r11+104]
	mov	rcx, QWORD PTR selection$[rsp]
	call	QWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
	mov	rdx, rax
	mov	rax, QWORD PTR arb$[rsp]
	mov	ecx, DWORD PTR [rax+96]
	mov	rax, QWORD PTR arb$[rsp]
	lea	rcx, QWORD PTR [rax+rcx+112]
	mov	r8, rbx
	call	QWORD PTR __imp_strncpy

; 108  : 	
; 109  : 	assert(manifest == GetManifest(arb));

	mov	rcx, QWORD PTR arb$[rsp]
	call	GetManifest
	mov	rdx, rax
	mov	rcx, QWORD PTR manifest$[rsp]
	call	QWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PEBD@Z
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN7@SetArb
	mov	r8d, 109				; 0000006dH
	lea	rdx, OFFSET FLAT:$SG126566
	lea	rcx, OFFSET FLAT:$SG126567
	call	QWORD PTR __imp__wassert
	xor	r11d, r11d
$LN7@SetArb:

; 110  : 	assert(selection == GetSelection(arb));

	mov	rcx, QWORD PTR arb$[rsp]
	call	GetSelection
	mov	rdx, rax
	mov	rcx, QWORD PTR selection$[rsp]
	call	QWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PEBD@Z
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN8@SetArb
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:$SG126569
	lea	rcx, OFFSET FLAT:$SG126570
	call	QWORD PTR __imp__wassert
	xor	r11d, r11d
$LN8@SetArb:

; 111  : 	
; 112  : 	HashManifest(arb);

	mov	rcx, QWORD PTR arb$[rsp]
	call	?HashManifest@@YAXPEAUCryptomatteArbitraryData@@@Z ; HashManifest

; 113  : 	HashSelection(arb);

	mov	rcx, QWORD PTR arb$[rsp]
	call	?HashSelection@@YAXPEAUCryptomatteArbitraryData@@@Z ; HashSelection

; 114  : 	
; 115  : 	PF_UNLOCK_HANDLE(*arbH);

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rcx, QWORD PTR arbH$[rsp]
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR [rax+176]

; 116  : }

	lea	rcx, QWORD PTR layer$[rsp]
	call	QWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 128				; 00000080H
	pop	rbx
	ret	0
SetArb	ENDP
_TEXT	ENDS
EXTRN	?MurmurHash3_x86_32@@YAXPEBXHKPEAX@Z:PROC	; MurmurHash3_x86_32
pdata	SEGMENT
$pdata$?HashManifest@@YAXPEAUCryptomatteArbitraryData@@@Z DD imagerel ?HashManifest@@YAXPEAUCryptomatteArbitraryData@@@Z
	DD	imagerel ?HashManifest@@YAXPEAUCryptomatteArbitraryData@@@Z+48
	DD	imagerel $unwind$?HashManifest@@YAXPEAUCryptomatteArbitraryData@@@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?HashManifest@@YAXPEAUCryptomatteArbitraryData@@@Z DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
_TEXT	SEGMENT
arb$ = 48
?HashManifest@@YAXPEAUCryptomatteArbitraryData@@@Z PROC	; HashManifest

; 37   : {

	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 38   : 	MurmurHash3_x86_32(&arb->data[0], arb->manifest_size, 0, &arb->manifest_hash);

	mov	r9, QWORD PTR arb$[rsp]
	add	r9, 100					; 00000064H
	mov	rcx, QWORD PTR arb$[rsp]
	add	rcx, 112				; 00000070H
	xor	r8d, r8d
	mov	rax, QWORD PTR arb$[rsp]
	mov	edx, DWORD PTR [rax+96]
	call	?MurmurHash3_x86_32@@YAXPEBXHKPEAX@Z	; MurmurHash3_x86_32

; 39   : }

	add	rsp, 40					; 00000028H
	ret	0
?HashManifest@@YAXPEAUCryptomatteArbitraryData@@@Z ENDP	; HashManifest
_TEXT	ENDS
pdata	SEGMENT
$pdata$?HashSelection@@YAXPEAUCryptomatteArbitraryData@@@Z DD imagerel ?HashSelection@@YAXPEAUCryptomatteArbitraryData@@@Z
	DD	imagerel ?HashSelection@@YAXPEAUCryptomatteArbitraryData@@@Z+57
	DD	imagerel $unwind$?HashSelection@@YAXPEAUCryptomatteArbitraryData@@@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?HashSelection@@YAXPEAUCryptomatteArbitraryData@@@Z DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
_TEXT	SEGMENT
arb$ = 48
?HashSelection@@YAXPEAUCryptomatteArbitraryData@@@Z PROC ; HashSelection

; 44   : {

	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 45   : 	MurmurHash3_x86_32(&arb->data[arb->manifest_size], arb->selection_size, 0, &arb->selection_hash);

	mov	r9, QWORD PTR arb$[rsp]
	add	r9, 108					; 0000006cH
	mov	rax, QWORD PTR arb$[rsp]
	mov	ecx, DWORD PTR [rax+96]
	mov	rax, QWORD PTR arb$[rsp]
	lea	rcx, QWORD PTR [rax+rcx+112]
	xor	r8d, r8d
	mov	rax, QWORD PTR arb$[rsp]
	mov	edx, DWORD PTR [rax+104]
	call	?MurmurHash3_x86_32@@YAXPEBXHKPEAX@Z	; MurmurHash3_x86_32

; 46   : }

	add	rsp, 40					; 00000028H
	ret	0
?HashSelection@@YAXPEAUCryptomatteArbitraryData@@@Z ENDP ; HashSelection
_TEXT	ENDS
PUBLIC	SetArbSelection
pdata	SEGMENT
$pdata$SetArbSelection DD imagerel $LN4
	DD	imagerel $LN4+325
	DD	imagerel $unwind$SetArbSelection
pdata	ENDS
xdata	SEGMENT
$unwind$SetArbSelection DD 021401H
	DD	030107214H
; Function compile flags: /Odtp
xdata	ENDS
_TEXT	SEGMENT
arb$ = 32
handle_siz$ = 40
siz$ = 48
in_data$ = 80
arbH$ = 88
selection$ = 96
SetArbSelection PROC

; 121  : {

$LN4:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbx
	sub	rsp, 64					; 00000040H

; 122  : 	CryptomatteArbitraryData *arb = (CryptomatteArbitraryData *)PF_LOCK_HANDLE(*arbH);

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rcx, QWORD PTR arbH$[rsp]
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR [rax+168]
	mov	QWORD PTR arb$[rsp], rax

; 123  : 	
; 124  : 	const size_t siz = sizeof(CryptomatteArbitraryData) + arb->manifest_size + selection.size();

	mov	rax, QWORD PTR arb$[rsp]
	mov	ebx, DWORD PTR [rax+96]
	mov	rcx, QWORD PTR selection$[rsp]
	call	QWORD PTR __imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
	lea	rax, QWORD PTR [rbx+rax+116]
	mov	QWORD PTR siz$[rsp], rax

; 125  : 	
; 126  : 	const size_t handle_siz = PF_GET_HANDLE_SIZE(*arbH);

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rcx, QWORD PTR arbH$[rsp]
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR [rax+440]
	mov	QWORD PTR handle_siz$[rsp], rax

; 127  : 	
; 128  : 	if(siz != handle_siz)

	mov	rax, QWORD PTR handle_siz$[rsp]
	cmp	QWORD PTR siz$[rsp], rax
	je	SHORT $LN1@SetArbSele

; 129  : 	{
; 130  : 		PF_UNLOCK_HANDLE(*arbH);

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rcx, QWORD PTR arbH$[rsp]
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR [rax+176]

; 131  : 		
; 132  : 		PF_RESIZE_HANDLE(siz, arbH);

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rdx, QWORD PTR arbH$[rsp]
	mov	rcx, QWORD PTR siz$[rsp]
	call	QWORD PTR [rax+464]

; 133  : 		
; 134  : 		arb = (CryptomatteArbitraryData *)PF_LOCK_HANDLE(*arbH);

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rcx, QWORD PTR arbH$[rsp]
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR [rax+168]
	mov	QWORD PTR arb$[rsp], rax
$LN1@SetArbSele:

; 135  : 	}
; 136  : 	
; 137  : 	arb->selection_size = selection.size() + 1;

	mov	rcx, QWORD PTR selection$[rsp]
	call	QWORD PTR __imp_?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
	mov	rcx, rax
	add	rcx, 1
	mov	rax, QWORD PTR arb$[rsp]
	mov	DWORD PTR [rax+104], ecx

; 138  : 	
; 139  : 	strncpy(&arb->data[arb->manifest_size], selection.c_str(), arb->selection_size);

	mov	rax, QWORD PTR arb$[rsp]
	mov	ebx, DWORD PTR [rax+104]
	mov	rcx, QWORD PTR selection$[rsp]
	call	QWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
	mov	rdx, rax
	mov	rax, QWORD PTR arb$[rsp]
	mov	ecx, DWORD PTR [rax+96]
	mov	rax, QWORD PTR arb$[rsp]
	lea	rcx, QWORD PTR [rax+rcx+112]
	mov	r8, rbx
	call	QWORD PTR __imp_strncpy

; 140  : 	
; 141  : 	HashSelection(arb);

	mov	rcx, QWORD PTR arb$[rsp]
	call	?HashSelection@@YAXPEAUCryptomatteArbitraryData@@@Z ; HashSelection

; 142  : 	
; 143  : 	PF_UNLOCK_HANDLE(*arbH);

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rcx, QWORD PTR arbH$[rsp]
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR [rax+176]

; 144  : }

	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
SetArbSelection ENDP
_TEXT	ENDS
PUBLIC	ArbNewDefault
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z:PROC
pdata	SEGMENT
$pdata$ArbNewDefault DD imagerel $LN4
	DD	imagerel $LN4+199
	DD	imagerel $unwind$ArbNewDefault
pdata	ENDS
xdata	SEGMENT
$unwind$ArbNewDefault DD 021b01H
	DD	01b011bH
; Function compile flags: /Odtp
xdata	ENDS
_TEXT	SEGMENT
err$ = 48
$T132812 = 56
$T132813 = 104
$T132814 = 152
in_data$ = 224
out_data$ = 232
refconPV$ = 240
arbPH$ = 248
ArbNewDefault PROC

; 151  : {

$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 216				; 000000d8H

; 152  : 	PF_Err err = PF_Err_NONE;

	mov	DWORD PTR err$[rsp], 0

; 153  : 	
; 154  : 	if(arbPH)

	cmp	QWORD PTR arbPH$[rsp], 0
	je	$LN1@ArbNewDefa

; 155  : 	{
; 156  : 		SetArb(in_data, arbPH, "", "", "");

	lea	rdx, OFFSET FLAT:$SG126601
	lea	rcx, QWORD PTR $T132812[rsp]
	call	QWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z
	lea	rdx, OFFSET FLAT:$SG126602
	lea	rcx, QWORD PTR $T132813[rsp]
	call	QWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z
	lea	rdx, OFFSET FLAT:$SG126603
	lea	rcx, QWORD PTR $T132814[rsp]
	call	QWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z
	lea	r11, QWORD PTR $T132812[rsp]
	mov	QWORD PTR [rsp+32], r11
	lea	r9, QWORD PTR $T132813[rsp]
	lea	r8, QWORD PTR $T132814[rsp]
	mov	rdx, QWORD PTR arbPH$[rsp]
	mov	rcx, QWORD PTR in_data$[rsp]
	call	SetArb
	lea	rcx, QWORD PTR $T132814[rsp]
	call	QWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	lea	rcx, QWORD PTR $T132813[rsp]
	call	QWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	lea	rcx, QWORD PTR $T132812[rsp]
	call	QWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
$LN1@ArbNewDefa:

; 157  : 	}
; 158  : 	
; 159  : 	return err;

	mov	eax, DWORD PTR err$[rsp]

; 160  : }

	add	rsp, 216				; 000000d8H
	ret	0
ArbNewDefault ENDP
_TEXT	ENDS
PUBLIC	HandleArbitrary
EXTRN	__ImageBase:BYTE
EXTRN	_fltused:DWORD
pdata	SEGMENT
$pdata$HandleArbitrary DD imagerel $LN21
	DD	imagerel $LN21+832
	DD	imagerel $unwind$HandleArbitrary
pdata	ENDS
xdata	SEGMENT
$unwind$HandleArbitrary DD 011801H
	DD	0a218H
; Function compile flags: /Odtp
xdata	ENDS
_TEXT	SEGMENT
err$ = 64
tv67 = 68
in_data$ = 96
out_data$ = 104
params$ = 112
output$ = 120
extra$ = 128
HandleArbitrary PROC

; 402  : {

$LN21:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H

; 403  : 	PF_Err 	err 	= PF_Err_NONE;

	mov	DWORD PTR err$[rsp], 0

; 404  : 	
; 405  : 	if(extra->id == ARBITRARY_DATA_ID)

	mov	rax, QWORD PTR extra$[rsp]
	movsx	eax, WORD PTR [rax+4]
	cmp	eax, 1
	jne	$LN14@HandleArbi

; 406  : 	{
; 407  : 		switch(extra->which_function)

	mov	rax, QWORD PTR extra$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv67[rsp], eax
	cmp	DWORD PTR tv67[rsp], 10
	ja	$LN12@HandleArbi
	movsxd	rax, DWORD PTR tv67[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN20@HandleArbi[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN11@HandleArbi:

; 408  : 		{
; 409  : 			case PF_Arbitrary_NEW_FUNC:
; 410  : 				err = ArbNewDefault(in_data, out_data, extra->u.new_func_params.refconPV, extra->u.new_func_params.arbPH);

	mov	r9, QWORD PTR extra$[rsp]
	mov	r9, QWORD PTR [r9+16]
	mov	r8, QWORD PTR extra$[rsp]
	mov	r8, QWORD PTR [r8+8]
	mov	rdx, QWORD PTR out_data$[rsp]
	mov	rcx, QWORD PTR in_data$[rsp]
	call	ArbNewDefault
	mov	DWORD PTR err$[rsp], eax

; 411  : 				break;

	jmp	$LN12@HandleArbi
$LN10@HandleArbi:

; 412  : 			case PF_Arbitrary_DISPOSE_FUNC:
; 413  : 				err = ArbDispose(in_data, out_data, extra->u.dispose_func_params.refconPV, extra->u.dispose_func_params.arbH);

	mov	r9, QWORD PTR extra$[rsp]
	mov	r9, QWORD PTR [r9+16]
	mov	r8, QWORD PTR extra$[rsp]
	mov	r8, QWORD PTR [r8+8]
	mov	rdx, QWORD PTR out_data$[rsp]
	mov	rcx, QWORD PTR in_data$[rsp]
	call	?ArbDispose@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAX@Z ; ArbDispose
	mov	DWORD PTR err$[rsp], eax

; 414  : 				break;

	jmp	$LN12@HandleArbi
$LN9@HandleArbi:

; 415  : 			case PF_Arbitrary_COPY_FUNC:
; 416  : 				err = ArbCopy(in_data, out_data, extra->u.copy_func_params.refconPV, extra->u.copy_func_params.src_arbH, extra->u.copy_func_params.dst_arbPH);

	mov	rax, QWORD PTR extra$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR extra$[rsp]
	mov	r9, QWORD PTR [r9+16]
	mov	r8, QWORD PTR extra$[rsp]
	mov	r8, QWORD PTR [r8+8]
	mov	rdx, QWORD PTR out_data$[rsp]
	mov	rcx, QWORD PTR in_data$[rsp]
	call	?ArbCopy@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAXPEAPEAPEAX@Z ; ArbCopy
	mov	DWORD PTR err$[rsp], eax

; 417  : 				break;

	jmp	$LN12@HandleArbi
$LN8@HandleArbi:

; 418  : 			case PF_Arbitrary_FLAT_SIZE_FUNC:
; 419  : 				err = ArbFlatSize(in_data, out_data, extra->u.flat_size_func_params.refconPV, extra->u.flat_size_func_params.arbH, extra->u.flat_size_func_params.flat_data_sizePLu);

	mov	rax, QWORD PTR extra$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR extra$[rsp]
	mov	r9, QWORD PTR [r9+16]
	mov	r8, QWORD PTR extra$[rsp]
	mov	r8, QWORD PTR [r8+8]
	mov	rdx, QWORD PTR out_data$[rsp]
	mov	rcx, QWORD PTR in_data$[rsp]
	call	?ArbFlatSize@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAXPEAK@Z ; ArbFlatSize
	mov	DWORD PTR err$[rsp], eax

; 420  : 				break;

	jmp	$LN12@HandleArbi
$LN7@HandleArbi:

; 421  : 			case PF_Arbitrary_FLATTEN_FUNC:
; 422  : 				err = ArbFlatten(in_data, out_data, extra->u.flatten_func_params.refconPV, extra->u.flatten_func_params.arbH, extra->u.flatten_func_params.buf_sizeLu, extra->u.flatten_func_params.flat_dataPV);

	mov	rax, QWORD PTR extra$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR extra$[rsp]
	mov	eax, DWORD PTR [rax+24]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR extra$[rsp]
	mov	r9, QWORD PTR [r9+16]
	mov	r8, QWORD PTR extra$[rsp]
	mov	r8, QWORD PTR [r8+8]
	mov	rdx, QWORD PTR out_data$[rsp]
	mov	rcx, QWORD PTR in_data$[rsp]
	call	?ArbFlatten@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAXK2@Z ; ArbFlatten
	mov	DWORD PTR err$[rsp], eax

; 423  : 				break;

	jmp	$LN12@HandleArbi
$LN6@HandleArbi:

; 424  : 			case PF_Arbitrary_UNFLATTEN_FUNC:
; 425  : 				err = ArbUnFlatten(in_data, out_data, extra->u.unflatten_func_params.refconPV, extra->u.unflatten_func_params.buf_sizeLu, extra->u.unflatten_func_params.flat_dataPV, extra->u.unflatten_func_params.arbPH);

	mov	rax, QWORD PTR extra$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR extra$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR extra$[rsp]
	mov	r9d, DWORD PTR [rax+16]
	mov	r8, QWORD PTR extra$[rsp]
	mov	r8, QWORD PTR [r8+8]
	mov	rdx, QWORD PTR out_data$[rsp]
	mov	rcx, QWORD PTR in_data$[rsp]
	call	?ArbUnFlatten@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXKPEBXPEAPEAPEAX@Z ; ArbUnFlatten
	mov	DWORD PTR err$[rsp], eax

; 426  : 				break;

	jmp	$LN12@HandleArbi
$LN5@HandleArbi:

; 427  : 			case PF_Arbitrary_INTERP_FUNC:
; 428  : 				err = ArbInterpolate(in_data, out_data, extra->u.interp_func_params.refconPV, extra->u.interp_func_params.left_arbH, extra->u.interp_func_params.right_arbH, extra->u.interp_func_params.tF, extra->u.interp_func_params.interpPH);

	mov	rax, QWORD PTR extra$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR extra$[rsp]
	movsdx	xmm0, QWORD PTR [rax+32]
	movsdx	QWORD PTR [rsp+40], xmm0
	mov	rax, QWORD PTR extra$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR extra$[rsp]
	mov	r9, QWORD PTR [r9+16]
	mov	r8, QWORD PTR extra$[rsp]
	mov	r8, QWORD PTR [r8+8]
	mov	rdx, QWORD PTR out_data$[rsp]
	mov	rcx, QWORD PTR in_data$[rsp]
	call	?ArbInterpolate@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAX3NPEAPEAPEAX@Z ; ArbInterpolate
	mov	DWORD PTR err$[rsp], eax

; 429  : 				break;

	jmp	$LN12@HandleArbi
$LN4@HandleArbi:

; 430  : 			case PF_Arbitrary_COMPARE_FUNC:
; 431  : 				err = ArbCompare(in_data, out_data, extra->u.compare_func_params.refconPV, extra->u.compare_func_params.a_arbH, extra->u.compare_func_params.b_arbH, extra->u.compare_func_params.compareP);

	mov	rax, QWORD PTR extra$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR extra$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR extra$[rsp]
	mov	r9, QWORD PTR [r9+16]
	mov	r8, QWORD PTR extra$[rsp]
	mov	r8, QWORD PTR [r8+8]
	mov	rdx, QWORD PTR out_data$[rsp]
	mov	rcx, QWORD PTR in_data$[rsp]
	call	?ArbCompare@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAX3PEAJ@Z ; ArbCompare
	mov	DWORD PTR err$[rsp], eax

; 432  : 				break;

	jmp	SHORT $LN12@HandleArbi
$LN3@HandleArbi:

; 433  : 			// these are necessary for copying and pasting keyframes
; 434  : 			// for now, we better not be called to do this
; 435  : 			case PF_Arbitrary_PRINT_SIZE_FUNC:
; 436  : 				assert(FALSE); //err = ArbPrintSize(in_data, out_data, extra->u.print_size_func_params.refconPV, extra->u.print_size_func_params.arbH, extra->u.print_size_func_params.print_sizePLu);

	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN17@HandleArbi
	mov	r8d, 436				; 000001b4H
	lea	rdx, OFFSET FLAT:$SG126785
	lea	rcx, OFFSET FLAT:$SG126786
	call	QWORD PTR __imp__wassert
	xor	r11d, r11d
$LN17@HandleArbi:

; 437  : 				break;

	jmp	SHORT $LN12@HandleArbi
$LN2@HandleArbi:

; 438  : 			case PF_Arbitrary_PRINT_FUNC:
; 439  : 				assert(FALSE); //err = ArbPrint(in_data, out_data, extra->u.print_func_params.refconPV, extra->u.print_func_params.print_flags, extra->u.print_func_params.arbH, extra->u.print_func_params.print_sizeLu, extra->u.print_func_params.print_bufferPC);

	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN18@HandleArbi
	mov	r8d, 439				; 000001b7H
	lea	rdx, OFFSET FLAT:$SG126789
	lea	rcx, OFFSET FLAT:$SG126790
	call	QWORD PTR __imp__wassert
	xor	r11d, r11d
$LN18@HandleArbi:

; 440  : 				break;

	jmp	SHORT $LN12@HandleArbi
$LN1@HandleArbi:

; 441  : 			case PF_Arbitrary_SCAN_FUNC:
; 442  : 				assert(FALSE); //err = ArbScan(in_data, out_data, extra->u.scan_func_params.refconPV, extra->u.scan_func_params.bufPC, extra->u.scan_func_params.bytes_to_scanLu, extra->u.scan_func_params.arbPH);

	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN19@HandleArbi
	mov	r8d, 442				; 000001baH
	lea	rdx, OFFSET FLAT:$SG126793
	lea	rcx, OFFSET FLAT:$SG126794
	call	QWORD PTR __imp__wassert
	xor	r11d, r11d
$LN19@HandleArbi:
$LN12@HandleArbi:
$LN14@HandleArbi:

; 443  : 				break;
; 444  : 		}
; 445  : 	}
; 446  : 	
; 447  : 	
; 448  : 	return err;

	mov	eax, DWORD PTR err$[rsp]

; 449  : }

	add	rsp, 88					; 00000058H
	ret	0
$LN20@HandleArbi:
	DD	$LN11@HandleArbi
	DD	$LN10@HandleArbi
	DD	$LN9@HandleArbi
	DD	$LN8@HandleArbi
	DD	$LN7@HandleArbi
	DD	$LN6@HandleArbi
	DD	$LN5@HandleArbi
	DD	$LN4@HandleArbi
	DD	$LN3@HandleArbi
	DD	$LN2@HandleArbi
	DD	$LN1@HandleArbi
HandleArbitrary ENDP
_TEXT	ENDS
pdata	SEGMENT
$pdata$?ArbDispose@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAX@Z DD imagerel ?ArbDispose@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAX@Z
	DD	imagerel ?ArbDispose@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAX@Z+62
	DD	imagerel $unwind$?ArbDispose@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAX@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?ArbDispose@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAX@Z DD 011801H
	DD	04218H
; Function compile flags: /Odtp
xdata	ENDS
_TEXT	SEGMENT
in_data$ = 48
out_data$ = 56
refconPV$ = 64
arbH$ = 72
?ArbDispose@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAX@Z PROC ; ArbDispose

; 167  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 168  : 	if(arbH)

	cmp	QWORD PTR arbH$[rsp], 0
	je	SHORT $LN1@ArbDispose

; 169  : 		PF_DISPOSE_HANDLE(arbH);

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rcx, QWORD PTR arbH$[rsp]
	call	QWORD PTR [rax+184]
$LN1@ArbDispose:

; 170  : 	
; 171  : 	return PF_Err_NONE;

	xor	eax, eax

; 172  : }

	add	rsp, 40					; 00000028H
	ret	0
?ArbDispose@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAX@Z ENDP ; ArbDispose
_TEXT	ENDS
EXTRN	memcpy:PROC
pdata	SEGMENT
$pdata$?ArbCopy@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAXPEAPEAPEAX@Z DD imagerel ?ArbCopy@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAXPEAPEAPEAX@Z
	DD	imagerel ?ArbCopy@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAXPEAPEAPEAX@Z+572
	DD	imagerel $unwind$?ArbCopy@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAXPEAPEAPEAX@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?ArbCopy@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAXPEAPEAPEAX@Z DD 011801H
	DD	08218H
; Function compile flags: /Odtp
xdata	ENDS
_TEXT	SEGMENT
err$ = 32
out_arb_data$126628 = 40
in_arb_data$126625 = 48
siz$126622 = 56
in_data$ = 80
out_data$ = 88
refconPV$ = 96
src_arbH$ = 104
dst_arbPH$ = 112
?ArbCopy@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAXPEAPEAPEAX@Z PROC ; ArbCopy

; 180  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 181  : 	PF_Err 	err 	= PF_Err_NONE;

	mov	DWORD PTR err$[rsp], 0

; 182  : 	
; 183  : 	if(src_arbH && dst_arbPH)

	cmp	QWORD PTR src_arbH$[rsp], 0
	je	$LN2@ArbCopy
	cmp	QWORD PTR dst_arbPH$[rsp], 0
	je	$LN2@ArbCopy

; 184  : 	{
; 185  : 		// allocate using the creation function
; 186  : 		err = ArbNewDefault(in_data, out_data, refconPV, dst_arbPH);

	mov	r9, QWORD PTR dst_arbPH$[rsp]
	mov	r8, QWORD PTR refconPV$[rsp]
	mov	rdx, QWORD PTR out_data$[rsp]
	mov	rcx, QWORD PTR in_data$[rsp]
	call	ArbNewDefault
	mov	DWORD PTR err$[rsp], eax

; 187  : 		
; 188  : 		if(!err)

	cmp	DWORD PTR err$[rsp], 0
	jne	$LN1@ArbCopy

; 189  : 		{
; 190  : 			const A_u_longlong siz = PF_GET_HANDLE_SIZE(src_arbH);

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rcx, QWORD PTR src_arbH$[rsp]
	call	QWORD PTR [rax+440]
	mov	QWORD PTR siz$126622[rsp], rax

; 191  : 			
; 192  : 			PF_RESIZE_HANDLE(siz, dst_arbPH);

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rdx, QWORD PTR dst_arbPH$[rsp]
	mov	rcx, QWORD PTR siz$126622[rsp]
	call	QWORD PTR [rax+464]

; 193  : 		
; 194  : 			CryptomatteArbitraryData *in_arb_data = (CryptomatteArbitraryData *)PF_LOCK_HANDLE(src_arbH),

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rcx, QWORD PTR src_arbH$[rsp]
	call	QWORD PTR [rax+168]
	mov	QWORD PTR in_arb_data$126625[rsp], rax

; 195  : 							*out_arb_data = (CryptomatteArbitraryData *)PF_LOCK_HANDLE(*dst_arbPH);

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rcx, QWORD PTR dst_arbPH$[rsp]
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR [rax+168]
	mov	QWORD PTR out_arb_data$126628[rsp], rax

; 196  : 			
; 197  : 			assert(in_arb_data->magic[0] == 'c' &&	in_arb_data->magic[1] == 'r' &&
; 198  : 					in_arb_data->magic[2] == 'y' && in_arb_data->magic[3] == '1');

	mov	rax, QWORD PTR in_arb_data$126625[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 99					; 00000063H
	jne	SHORT $LN5@ArbCopy
	mov	rax, QWORD PTR in_arb_data$126625[rsp]
	movsx	eax, BYTE PTR [rax+1]
	cmp	eax, 114				; 00000072H
	jne	SHORT $LN5@ArbCopy
	mov	rax, QWORD PTR in_arb_data$126625[rsp]
	movsx	eax, BYTE PTR [rax+2]
	cmp	eax, 121				; 00000079H
	jne	SHORT $LN5@ArbCopy
	mov	rax, QWORD PTR in_arb_data$126625[rsp]
	movsx	eax, BYTE PTR [rax+3]
	cmp	eax, 49					; 00000031H
	je	SHORT $LN6@ArbCopy
$LN5@ArbCopy:
	mov	r8d, 198				; 000000c6H
	lea	rdx, OFFSET FLAT:$SG126632
	lea	rcx, OFFSET FLAT:$SG126633
	call	QWORD PTR __imp__wassert
	xor	r11d, r11d
$LN6@ArbCopy:

; 199  : 				
; 200  : 			assert(out_arb_data->magic[0] == 'c' &&	out_arb_data->magic[1] == 'r' &&
; 201  : 					out_arb_data->magic[2] == 'y' && out_arb_data->magic[3] == '1');

	mov	rax, QWORD PTR out_arb_data$126628[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 99					; 00000063H
	jne	SHORT $LN7@ArbCopy
	mov	rax, QWORD PTR out_arb_data$126628[rsp]
	movsx	eax, BYTE PTR [rax+1]
	cmp	eax, 114				; 00000072H
	jne	SHORT $LN7@ArbCopy
	mov	rax, QWORD PTR out_arb_data$126628[rsp]
	movsx	eax, BYTE PTR [rax+2]
	cmp	eax, 121				; 00000079H
	jne	SHORT $LN7@ArbCopy
	mov	rax, QWORD PTR out_arb_data$126628[rsp]
	movsx	eax, BYTE PTR [rax+3]
	cmp	eax, 49					; 00000031H
	je	SHORT $LN8@ArbCopy
$LN7@ArbCopy:
	mov	r8d, 201				; 000000c9H
	lea	rdx, OFFSET FLAT:$SG126635
	lea	rcx, OFFSET FLAT:$SG126636
	call	QWORD PTR __imp__wassert
	xor	r11d, r11d
$LN8@ArbCopy:

; 202  : 					
; 203  : 			memcpy(out_arb_data, in_arb_data, siz);

	mov	r8, QWORD PTR siz$126622[rsp]
	mov	rdx, QWORD PTR in_arb_data$126625[rsp]
	mov	rcx, QWORD PTR out_arb_data$126628[rsp]
	call	memcpy

; 204  : 			
; 205  : 		#ifndef NDEBUG
; 206  : 			HashManifest(out_arb_data);

	mov	rcx, QWORD PTR out_arb_data$126628[rsp]
	call	?HashManifest@@YAXPEAUCryptomatteArbitraryData@@@Z ; HashManifest

; 207  : 			HashSelection(out_arb_data);

	mov	rcx, QWORD PTR out_arb_data$126628[rsp]
	call	?HashSelection@@YAXPEAUCryptomatteArbitraryData@@@Z ; HashSelection

; 208  : 			
; 209  : 			assert(out_arb_data->manifest_hash == in_arb_data->manifest_hash);

	mov	r11, QWORD PTR out_arb_data$126628[rsp]
	mov	rax, QWORD PTR in_arb_data$126625[rsp]
	mov	eax, DWORD PTR [rax+100]
	cmp	DWORD PTR [r11+100], eax
	je	SHORT $LN9@ArbCopy
	mov	r8d, 209				; 000000d1H
	lea	rdx, OFFSET FLAT:$SG126638
	lea	rcx, OFFSET FLAT:$SG126639
	call	QWORD PTR __imp__wassert
	xor	r11d, r11d
$LN9@ArbCopy:

; 210  : 			assert(out_arb_data->selection_hash == in_arb_data->selection_hash);

	mov	rcx, QWORD PTR out_arb_data$126628[rsp]
	mov	rax, QWORD PTR in_arb_data$126625[rsp]
	mov	eax, DWORD PTR [rax+108]
	cmp	DWORD PTR [rcx+108], eax
	je	SHORT $LN10@ArbCopy
	mov	r8d, 210				; 000000d2H
	lea	rdx, OFFSET FLAT:$SG126641
	lea	rcx, OFFSET FLAT:$SG126642
	call	QWORD PTR __imp__wassert
	xor	r11d, r11d
$LN10@ArbCopy:

; 211  : 		#endif
; 212  : 			
; 213  : 			PF_UNLOCK_HANDLE(src_arbH);

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rcx, QWORD PTR src_arbH$[rsp]
	call	QWORD PTR [rax+176]

; 214  : 			PF_UNLOCK_HANDLE(*dst_arbPH);

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rcx, QWORD PTR dst_arbPH$[rsp]
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR [rax+176]
$LN1@ArbCopy:
$LN2@ArbCopy:

; 215  : 		}
; 216  : 	}
; 217  : 	
; 218  : 	return err;

	mov	eax, DWORD PTR err$[rsp]

; 219  : }

	add	rsp, 72					; 00000048H
	ret	0
?ArbCopy@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAXPEAPEAPEAX@Z ENDP ; ArbCopy
_TEXT	ENDS
pdata	SEGMENT
$pdata$?ArbFlatSize@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAXPEAK@Z DD imagerel ?ArbFlatSize@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAXPEAK@Z
	DD	imagerel ?ArbFlatSize@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAXPEAK@Z+73
	DD	imagerel $unwind$?ArbFlatSize@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAXPEAK@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?ArbFlatSize@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAXPEAK@Z DD 011801H
	DD	04218H
; Function compile flags: /Odtp
xdata	ENDS
_TEXT	SEGMENT
in_data$ = 48
out_data$ = 56
refconPV$ = 64
arbH$ = 72
flat_data_sizePLu$ = 80
?ArbFlatSize@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAXPEAK@Z PROC ; ArbFlatSize

; 227  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 228  : 	// flat is the same size as inflated
; 229  : 	if(arbH)

	cmp	QWORD PTR arbH$[rsp], 0
	je	SHORT $LN1@ArbFlatSiz

; 230  : 		*flat_data_sizePLu = PF_GET_HANDLE_SIZE(arbH);

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rcx, QWORD PTR arbH$[rsp]
	call	QWORD PTR [rax+440]
	mov	r11, rax
	mov	rax, QWORD PTR flat_data_sizePLu$[rsp]
	mov	DWORD PTR [rax], r11d
$LN1@ArbFlatSiz:

; 231  : 	
; 232  : 	return PF_Err_NONE;

	xor	eax, eax

; 233  : }

	add	rsp, 40					; 00000028H
	ret	0
?ArbFlatSize@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAXPEAK@Z ENDP ; ArbFlatSize
_TEXT	ENDS
pdata	SEGMENT
$pdata$?ArbFlatten@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAXK2@Z DD imagerel ?ArbFlatten@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAXK2@Z
	DD	imagerel ?ArbFlatten@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAXK2@Z+230
	DD	imagerel $unwind$?ArbFlatten@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAXK2@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?ArbFlatten@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAXK2@Z DD 021901H
	DD	030157219H
; Function compile flags: /Odtp
xdata	ENDS
_TEXT	SEGMENT
err$ = 32
out_arb_data$126667 = 40
in_arb_data$126664 = 48
in_data$ = 80
out_data$ = 88
refconPV$ = 96
arbH$ = 104
buf_sizeLu$ = 112
flat_dataPV$ = 120
?ArbFlatten@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAXK2@Z PROC ; ArbFlatten

; 242  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbx
	sub	rsp, 64					; 00000040H

; 243  : 	PF_Err 	err 	= PF_Err_NONE;

	mov	DWORD PTR err$[rsp], 0

; 244  : 	
; 245  : 	if(arbH && flat_dataPV)

	cmp	QWORD PTR arbH$[rsp], 0
	je	$LN1@ArbFlatten
	cmp	QWORD PTR flat_dataPV$[rsp], 0
	je	$LN1@ArbFlatten

; 246  : 	{
; 247  : 		// they provide the buffer, we just move data
; 248  : 		CryptomatteArbitraryData *in_arb_data = (CryptomatteArbitraryData *)PF_LOCK_HANDLE(arbH),

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rcx, QWORD PTR arbH$[rsp]
	call	QWORD PTR [rax+168]
	mov	QWORD PTR in_arb_data$126664[rsp], rax

; 249  : 						*out_arb_data = (CryptomatteArbitraryData *)flat_dataPV;

	mov	rax, QWORD PTR flat_dataPV$[rsp]
	mov	QWORD PTR out_arb_data$126667[rsp], rax

; 250  : 
; 251  : 		assert(buf_sizeLu >= PF_GET_HANDLE_SIZE(arbH));

	mov	ebx, DWORD PTR buf_sizeLu$[rsp]
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rcx, QWORD PTR arbH$[rsp]
	call	QWORD PTR [rax+440]
	cmp	rbx, rax
	jae	SHORT $LN4@ArbFlatten
	mov	r8d, 251				; 000000fbH
	lea	rdx, OFFSET FLAT:$SG126671
	lea	rcx, OFFSET FLAT:$SG126672
	call	QWORD PTR __imp__wassert
	xor	r11d, r11d
$LN4@ArbFlatten:

; 252  : 	
; 253  : 		memcpy(out_arb_data, in_arb_data, PF_GET_HANDLE_SIZE(arbH));

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rcx, QWORD PTR arbH$[rsp]
	call	QWORD PTR [rax+440]
	mov	r8, rax
	mov	rdx, QWORD PTR in_arb_data$126664[rsp]
	mov	rcx, QWORD PTR out_arb_data$126667[rsp]
	call	memcpy

; 254  : 		
; 255  : 	#ifdef AE_BIG_ENDIAN
; 256  : 		// really, you're compiling this for PPC?
; 257  : 		SwapArbData(out_arb_data);
; 258  : 	#endif
; 259  : 	
; 260  : 		PF_UNLOCK_HANDLE(arbH);

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rcx, QWORD PTR arbH$[rsp]
	call	QWORD PTR [rax+176]
$LN1@ArbFlatten:

; 261  : 	}
; 262  : 	
; 263  : 	return err;

	mov	eax, DWORD PTR err$[rsp]

; 264  : }

	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
?ArbFlatten@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAXK2@Z ENDP ; ArbFlatten
_TEXT	ENDS
pdata	SEGMENT
$pdata$?ArbUnFlatten@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXKPEBXPEAPEAPEAX@Z DD imagerel ?ArbUnFlatten@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXKPEBXPEAPEAPEAX@Z
	DD	imagerel ?ArbUnFlatten@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXKPEBXPEAPEAPEAX@Z+600
	DD	imagerel $unwind$?ArbUnFlatten@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXKPEBXPEAPEAPEAX@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?ArbUnFlatten@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXKPEBXPEAPEAPEAX@Z DD 021901H
	DD	030157219H
; Function compile flags: /Odtp
xdata	ENDS
_TEXT	SEGMENT
err$ = 32
old_selection_hash$126703 = 36
out_arb_data$126689 = 40
in_arb_data$126687 = 48
old_manifest_hash$126702 = 56
in_data$ = 80
out_data$ = 88
refconPV$ = 96
buf_sizeLu$ = 104
flat_dataPV$ = 112
arbPH$ = 120
?ArbUnFlatten@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXKPEBXPEAPEAPEAX@Z PROC ; ArbUnFlatten

; 273  : {

	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbx
	sub	rsp, 64					; 00000040H

; 274  : 	PF_Err 	err 	= PF_Err_NONE;

	mov	DWORD PTR err$[rsp], 0

; 275  : 	
; 276  : 	if(arbPH && flat_dataPV)

	cmp	QWORD PTR arbPH$[rsp], 0
	je	$LN2@ArbUnFlatt
	cmp	QWORD PTR flat_dataPV$[rsp], 0
	je	$LN2@ArbUnFlatt

; 277  : 	{
; 278  : 		// they provide a flat buffer, we have to make the handle (using the default function)
; 279  : 		err = ArbNewDefault(in_data, out_data, refconPV, arbPH);

	mov	r9, QWORD PTR arbPH$[rsp]
	mov	r8, QWORD PTR refconPV$[rsp]
	mov	rdx, QWORD PTR out_data$[rsp]
	mov	rcx, QWORD PTR in_data$[rsp]
	call	ArbNewDefault
	mov	DWORD PTR err$[rsp], eax

; 280  : 		
; 281  : 		if(!err && *arbPH)

	cmp	DWORD PTR err$[rsp], 0
	jne	$LN1@ArbUnFlatt
	mov	rax, QWORD PTR arbPH$[rsp]
	cmp	QWORD PTR [rax], 0
	je	$LN1@ArbUnFlatt

; 282  : 		{
; 283  : 			PF_RESIZE_HANDLE(buf_sizeLu, arbPH);

	mov	ecx, DWORD PTR buf_sizeLu$[rsp]
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rdx, QWORD PTR arbPH$[rsp]
	call	QWORD PTR [rax+464]

; 284  : 			
; 285  : 			CryptomatteArbitraryData *in_arb_data = (CryptomatteArbitraryData *)flat_dataPV,

	mov	r11, QWORD PTR flat_dataPV$[rsp]
	mov	QWORD PTR in_arb_data$126687[rsp], r11

; 286  : 							*out_arb_data = (CryptomatteArbitraryData *)PF_LOCK_HANDLE(*arbPH);

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rcx, QWORD PTR arbPH$[rsp]
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR [rax+168]
	mov	QWORD PTR out_arb_data$126689[rsp], rax

; 287  : 			
; 288  : 			
; 289  : 			assert(in_arb_data->magic[0] == 'c' &&	in_arb_data->magic[1] == 'r' &&
; 290  : 					in_arb_data->magic[2] == 'y' && in_arb_data->magic[3] == '1');

	mov	rax, QWORD PTR in_arb_data$126687[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 99					; 00000063H
	jne	SHORT $LN5@ArbUnFlatt
	mov	rax, QWORD PTR in_arb_data$126687[rsp]
	movsx	eax, BYTE PTR [rax+1]
	cmp	eax, 114				; 00000072H
	jne	SHORT $LN5@ArbUnFlatt
	mov	rax, QWORD PTR in_arb_data$126687[rsp]
	movsx	eax, BYTE PTR [rax+2]
	cmp	eax, 121				; 00000079H
	jne	SHORT $LN5@ArbUnFlatt
	mov	rax, QWORD PTR in_arb_data$126687[rsp]
	movsx	eax, BYTE PTR [rax+3]
	cmp	eax, 49					; 00000031H
	je	SHORT $LN6@ArbUnFlatt
$LN5@ArbUnFlatt:
	mov	r8d, 290				; 00000122H
	lea	rdx, OFFSET FLAT:$SG126693
	lea	rcx, OFFSET FLAT:$SG126694
	call	QWORD PTR __imp__wassert
	xor	r11d, r11d
$LN6@ArbUnFlatt:

; 291  : 				
; 292  : 			assert(out_arb_data->magic[0] == 'c' &&	out_arb_data->magic[1] == 'r' &&
; 293  : 					out_arb_data->magic[2] == 'y' && out_arb_data->magic[3] == '1');

	mov	rax, QWORD PTR out_arb_data$126689[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 99					; 00000063H
	jne	SHORT $LN7@ArbUnFlatt
	mov	rax, QWORD PTR out_arb_data$126689[rsp]
	movsx	eax, BYTE PTR [rax+1]
	cmp	eax, 114				; 00000072H
	jne	SHORT $LN7@ArbUnFlatt
	mov	rax, QWORD PTR out_arb_data$126689[rsp]
	movsx	eax, BYTE PTR [rax+2]
	cmp	eax, 121				; 00000079H
	jne	SHORT $LN7@ArbUnFlatt
	mov	rax, QWORD PTR out_arb_data$126689[rsp]
	movsx	eax, BYTE PTR [rax+3]
	cmp	eax, 49					; 00000031H
	je	SHORT $LN8@ArbUnFlatt
$LN7@ArbUnFlatt:
	mov	r8d, 293				; 00000125H
	lea	rdx, OFFSET FLAT:$SG126696
	lea	rcx, OFFSET FLAT:$SG126697
	call	QWORD PTR __imp__wassert
	xor	r11d, r11d
$LN8@ArbUnFlatt:

; 294  : 			assert(buf_sizeLu <= PF_GET_HANDLE_SIZE(*arbPH));

	mov	ebx, DWORD PTR buf_sizeLu$[rsp]
	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rcx, QWORD PTR arbPH$[rsp]
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR [rax+440]
	cmp	rbx, rax
	jbe	SHORT $LN9@ArbUnFlatt
	mov	r8d, 294				; 00000126H
	lea	rdx, OFFSET FLAT:$SG126700
	lea	rcx, OFFSET FLAT:$SG126701
	call	QWORD PTR __imp__wassert
	xor	r11d, r11d
$LN9@ArbUnFlatt:

; 295  : 		
; 296  : 			memcpy(out_arb_data, in_arb_data, buf_sizeLu);

	mov	r8d, DWORD PTR buf_sizeLu$[rsp]
	mov	rdx, QWORD PTR in_arb_data$126687[rsp]
	mov	rcx, QWORD PTR out_arb_data$126689[rsp]
	call	memcpy

; 297  : 			
; 298  : 		#ifdef AE_BIG_ENDIAN
; 299  : 			// swap bytes back to PPC style (?)
; 300  : 			SwapArbData(out_arb_data);
; 301  : 		#endif
; 302  : 		
; 303  : 		#ifndef NDEBUG
; 304  : 			const Hash old_manifest_hash = out_arb_data->manifest_hash;

	mov	r11, QWORD PTR out_arb_data$126689[rsp]
	mov	eax, DWORD PTR [r11+100]
	mov	DWORD PTR old_manifest_hash$126702[rsp], eax

; 305  : 			const Hash old_selection_hash = out_arb_data->selection_hash;

	mov	rax, QWORD PTR out_arb_data$126689[rsp]
	mov	eax, DWORD PTR [rax+108]
	mov	DWORD PTR old_selection_hash$126703[rsp], eax

; 306  : 		#endif
; 307  : 			
; 308  : 			HashManifest(out_arb_data);

	mov	rcx, QWORD PTR out_arb_data$126689[rsp]
	call	?HashManifest@@YAXPEAUCryptomatteArbitraryData@@@Z ; HashManifest

; 309  : 			HashSelection(out_arb_data);

	mov	rcx, QWORD PTR out_arb_data$126689[rsp]
	call	?HashSelection@@YAXPEAUCryptomatteArbitraryData@@@Z ; HashSelection

; 310  : 			
; 311  : 		#ifndef NDEBUG
; 312  : 			assert(old_manifest_hash == out_arb_data->manifest_hash);

	mov	r11, QWORD PTR out_arb_data$126689[rsp]
	mov	eax, DWORD PTR [r11+100]
	cmp	DWORD PTR old_manifest_hash$126702[rsp], eax
	je	SHORT $LN10@ArbUnFlatt
	mov	r8d, 312				; 00000138H
	lea	rdx, OFFSET FLAT:$SG126705
	lea	rcx, OFFSET FLAT:$SG126706
	call	QWORD PTR __imp__wassert
	xor	r11d, r11d
$LN10@ArbUnFlatt:

; 313  : 			assert(old_selection_hash == out_arb_data->selection_hash);

	mov	rax, QWORD PTR out_arb_data$126689[rsp]
	mov	eax, DWORD PTR [rax+108]
	cmp	DWORD PTR old_selection_hash$126703[rsp], eax
	je	SHORT $LN11@ArbUnFlatt
	mov	r8d, 313				; 00000139H
	lea	rdx, OFFSET FLAT:$SG126708
	lea	rcx, OFFSET FLAT:$SG126709
	call	QWORD PTR __imp__wassert
	xor	r11d, r11d
$LN11@ArbUnFlatt:

; 314  : 		#endif
; 315  : 		
; 316  : 			PF_UNLOCK_HANDLE(*arbPH);

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rcx, QWORD PTR arbPH$[rsp]
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR [rax+176]
$LN1@ArbUnFlatt:
$LN2@ArbUnFlatt:

; 317  : 		}
; 318  : 	}
; 319  : 	
; 320  : 	return err;

	mov	eax, DWORD PTR err$[rsp]

; 321  : }

	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
?ArbUnFlatten@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXKPEBXPEAPEAPEAX@Z ENDP ; ArbUnFlatten
_TEXT	ENDS
pdata	SEGMENT
$pdata$?ArbInterpolate@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAX3NPEAPEAPEAX@Z DD imagerel ?ArbInterpolate@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAX3NPEAPEAPEAX@Z
	DD	imagerel ?ArbInterpolate@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAX3NPEAPEAPEAX@Z+369
	DD	imagerel $unwind$?ArbInterpolate@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAX3NPEAPEAPEAX@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?ArbInterpolate@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAX3NPEAPEAPEAX@Z DD 011801H
	DD	08218H
; Function compile flags: /Odtp
xdata	ENDS
_TEXT	SEGMENT
err$ = 32
out_arb_data$126732 = 40
in_arb_data$126729 = 48
siz$126726 = 56
in_data$ = 80
out_data$ = 88
refconPV$ = 96
left_arbH$ = 104
right_arbH$ = 112
tF$ = 120
interpPH$ = 128
?ArbInterpolate@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAX3NPEAPEAPEAX@Z PROC ; ArbInterpolate

; 330  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 331  : 	PF_Err 	err 	= PF_Err_NONE;

	mov	DWORD PTR err$[rsp], 0

; 332  : 	
; 333  : 	assert(FALSE); // we shouldn't be doing this in Cryptomatte - we said we didn't interpolate

	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN5@ArbInterpo
	mov	r8d, 333				; 0000014dH
	lea	rdx, OFFSET FLAT:$SG126722
	lea	rcx, OFFSET FLAT:$SG126723
	call	QWORD PTR __imp__wassert
	xor	r11d, r11d
$LN5@ArbInterpo:

; 334  : 	
; 335  : 	if(left_arbH && right_arbH && interpPH)

	cmp	QWORD PTR left_arbH$[rsp], 0
	je	$LN2@ArbInterpo
	cmp	QWORD PTR right_arbH$[rsp], 0
	je	$LN2@ArbInterpo
	cmp	QWORD PTR interpPH$[rsp], 0
	je	$LN2@ArbInterpo

; 336  : 	{
; 337  : 		// allocate using our own func
; 338  : 		err = ArbNewDefault(in_data, out_data, refconPV, interpPH);

	mov	r9, QWORD PTR interpPH$[rsp]
	mov	r8, QWORD PTR refconPV$[rsp]
	mov	rdx, QWORD PTR out_data$[rsp]
	mov	rcx, QWORD PTR in_data$[rsp]
	call	ArbNewDefault
	mov	DWORD PTR err$[rsp], eax

; 339  : 		
; 340  : 		if(!err && *interpPH)

	cmp	DWORD PTR err$[rsp], 0
	jne	$LN1@ArbInterpo
	mov	rax, QWORD PTR interpPH$[rsp]
	cmp	QWORD PTR [rax], 0
	je	$LN1@ArbInterpo

; 341  : 		{
; 342  : 			const A_u_longlong siz = PF_GET_HANDLE_SIZE(left_arbH);

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rcx, QWORD PTR left_arbH$[rsp]
	call	QWORD PTR [rax+440]
	mov	QWORD PTR siz$126726[rsp], rax

; 343  : 			
; 344  : 			PF_RESIZE_HANDLE(siz, interpPH);

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rdx, QWORD PTR interpPH$[rsp]
	mov	rcx, QWORD PTR siz$126726[rsp]
	call	QWORD PTR [rax+464]

; 345  : 			
; 346  : 			// we're just going to copy the left_data
; 347  : 			CryptomatteArbitraryData *in_arb_data = (CryptomatteArbitraryData *)PF_LOCK_HANDLE(left_arbH),

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rcx, QWORD PTR left_arbH$[rsp]
	call	QWORD PTR [rax+168]
	mov	QWORD PTR in_arb_data$126729[rsp], rax

; 348  : 							*out_arb_data = (CryptomatteArbitraryData *)PF_LOCK_HANDLE(*interpPH);

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rcx, QWORD PTR interpPH$[rsp]
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR [rax+168]
	mov	QWORD PTR out_arb_data$126732[rsp], rax

; 349  : 			
; 350  : 			memcpy(out_arb_data, in_arb_data, siz);

	mov	r8, QWORD PTR siz$126726[rsp]
	mov	rdx, QWORD PTR in_arb_data$126729[rsp]
	mov	rcx, QWORD PTR out_arb_data$126732[rsp]
	call	memcpy

; 351  : 			
; 352  : 			PF_UNLOCK_HANDLE(left_arbH);

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rcx, QWORD PTR left_arbH$[rsp]
	call	QWORD PTR [rax+176]

; 353  : 			PF_UNLOCK_HANDLE(*interpPH);

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rcx, QWORD PTR interpPH$[rsp]
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR [rax+176]
$LN1@ArbInterpo:
$LN2@ArbInterpo:

; 354  : 		}
; 355  : 	}
; 356  : 	
; 357  : 	return err;

	mov	eax, DWORD PTR err$[rsp]

; 358  : }

	add	rsp, 72					; 00000048H
	ret	0
?ArbInterpolate@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAX3NPEAPEAPEAX@Z ENDP ; ArbInterpolate
_TEXT	ENDS
EXTRN	__imp_strncmp:PROC
pdata	SEGMENT
$pdata$?ArbCompare@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAX3PEAJ@Z DD imagerel ?ArbCompare@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAX3PEAJ@Z
	DD	imagerel ?ArbCompare@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAX3PEAJ@Z+359
	DD	imagerel $unwind$?ArbCompare@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAX3PEAJ@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?ArbCompare@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAX3PEAJ@Z DD 021901H
	DD	030157219H
; Function compile flags: /Odtp
xdata	ENDS
_TEXT	SEGMENT
err$ = 32
a_data$126747 = 40
b_data$126750 = 48
in_data$ = 80
out_data$ = 88
refconPV$ = 96
a_arbH$ = 104
b_arbH$ = 112
compareP$ = 120
?ArbCompare@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAX3PEAJ@Z PROC ; ArbCompare

; 367  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbx
	sub	rsp, 64					; 00000040H

; 368  : 	PF_Err 	err 	= PF_Err_NONE;

	mov	DWORD PTR err$[rsp], 0

; 369  : 	
; 370  : 	if(a_arbH && b_arbH)

	cmp	QWORD PTR a_arbH$[rsp], 0
	je	$LN3@ArbCompare
	cmp	QWORD PTR b_arbH$[rsp], 0
	je	$LN3@ArbCompare

; 371  : 	{
; 372  : 		CryptomatteArbitraryData *a_data = (CryptomatteArbitraryData *)PF_LOCK_HANDLE(a_arbH),

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rcx, QWORD PTR a_arbH$[rsp]
	call	QWORD PTR [rax+168]
	mov	QWORD PTR a_data$126747[rsp], rax

; 373  : 						*b_data = (CryptomatteArbitraryData *)PF_LOCK_HANDLE(b_arbH);

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rcx, QWORD PTR b_arbH$[rsp]
	call	QWORD PTR [rax+168]
	mov	QWORD PTR b_data$126750[rsp], rax

; 374  : 
; 375  : 		assert(!strncmp(a_data->magic, "cry1", 4) && !strncmp(b_data->magic, "cry1", 4));

	mov	r8d, 4
	lea	rdx, OFFSET FLAT:$SG126754
	mov	rcx, QWORD PTR a_data$126747[rsp]
	call	QWORD PTR __imp_strncmp
	test	eax, eax
	jne	SHORT $LN6@ArbCompare
	mov	r8d, 4
	lea	rdx, OFFSET FLAT:$SG126755
	mov	rcx, QWORD PTR b_data$126750[rsp]
	call	QWORD PTR __imp_strncmp
	test	eax, eax
	je	SHORT $LN7@ArbCompare
$LN6@ArbCompare:
	mov	r8d, 375				; 00000177H
	lea	rdx, OFFSET FLAT:$SG126756
	lea	rcx, OFFSET FLAT:$SG126757
	call	QWORD PTR __imp__wassert
	xor	r11d, r11d
$LN7@ArbCompare:

; 376  : 		
; 377  : 		if(!strncmp(GetLayer(a_data), GetLayer(b_data), MAX_LAYER_NAME_LEN + 1) && 
; 378  : 			a_data->manifest_hash == b_data->manifest_hash &&
; 379  : 			a_data->selection_hash == b_data->selection_hash)

	mov	rcx, QWORD PTR b_data$126750[rsp]
	call	GetLayer
	mov	rbx, rax
	mov	rcx, QWORD PTR a_data$126747[rsp]
	call	GetLayer
	mov	r8d, 64					; 00000040H
	mov	rdx, rbx
	mov	rcx, rax
	call	QWORD PTR __imp_strncmp
	test	eax, eax
	jne	SHORT $LN2@ArbCompare
	mov	rcx, QWORD PTR a_data$126747[rsp]
	mov	rax, QWORD PTR b_data$126750[rsp]
	mov	eax, DWORD PTR [rax+100]
	cmp	DWORD PTR [rcx+100], eax
	jne	SHORT $LN2@ArbCompare
	mov	rcx, QWORD PTR a_data$126747[rsp]
	mov	rax, QWORD PTR b_data$126750[rsp]
	mov	eax, DWORD PTR [rax+108]
	cmp	DWORD PTR [rcx+108], eax
	jne	SHORT $LN2@ArbCompare

; 380  : 		{
; 381  : 			*compareP = PF_ArbCompare_EQUAL;

	mov	rax, QWORD PTR compareP$[rsp]
	mov	DWORD PTR [rax], 0

; 382  : 		}
; 383  : 		else

	jmp	SHORT $LN1@ArbCompare
$LN2@ArbCompare:

; 384  : 			*compareP = PF_ArbCompare_NOT_EQUAL;

	mov	rax, QWORD PTR compareP$[rsp]
	mov	DWORD PTR [rax], 3
$LN1@ArbCompare:

; 385  : 		
; 386  : 		
; 387  : 		PF_UNLOCK_HANDLE(a_arbH);

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rcx, QWORD PTR a_arbH$[rsp]
	call	QWORD PTR [rax+176]

; 388  : 		PF_UNLOCK_HANDLE(b_arbH);

	mov	rax, QWORD PTR in_data$[rsp]
	mov	rax, QWORD PTR [rax+176]
	mov	rcx, QWORD PTR b_arbH$[rsp]
	call	QWORD PTR [rax+176]
$LN3@ArbCompare:

; 389  : 	}
; 390  : 	
; 391  : 	return err;

	mov	eax, DWORD PTR err$[rsp]

; 392  : }

	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
?ArbCompare@@YAJPEAUPF_InData@@PEAUPF_OutData@@PEAXPEAPEAX3PEAJ@Z ENDP ; ArbCompare
_TEXT	ENDS
END
